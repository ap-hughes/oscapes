<div class="map-container">
  <div class='sidebar'>
    <% if false %>
<!--     <div class="heading pad2"> -->
<!--       <h1>Search Routes</h1>
      <div id="search-field">
        <%= form_tag routes_path, method: :get do %>
          <%= text_field_tag :query,
            params[:query],
            class: "form-control",
            placeholder: "Find a hike by name or description, difficulty, duration, ascent, distance..."
          %>
        <% end %>
      </div> -->
<% end %>
      <div id="filter-bar">
        <%= simple_form_for :search, url: routes_path, method: :get, html: { class: 'form-inline' } do |f| %>
          <%= f.input :difficulty, collection: ["Challenging", "Moderate", "Easy"], include_blank: "Difficulty", label: false, required:false, id: 'difficulty' %>
          <%= f.input :distance, collection: [[0..100, 'Under 100km'], [100..300, '100-300km'], [300..500, '300km-500km'], [500..Route.all.collect(&:distance).map(&:to_i).max, 'Over 500km']], label_method: :second, value_method: :first, include_blank: "Distance", label: false, required:false, id: 'distance' %>
          <%= f.input :ascent, collection: [[0..100, 'Under 100m'], [100..500, '100-500m'], [500..1500, '500-1500m'], [1500..Route.all.collect(&:ascent).map(&:to_i).max, 'Over 1500m']], label_method: :second, value_method: :first, include_blank: "Ascent", label: false, required:false, id: 'ascent' %>
          <%= f.input :duration, collection: [[0..10, 'Under 10 hours'], [10..20, '1 to 2 days'], [20..70, '2 to 7 days'], [70..Route.all.collect(&:duration).map(&:to_i).max, 'Over 7 days']], label_method: :second, value_method: :first, include_blank: "Duration", label: false, required:false, id: 'duration' %>
          <%= f.button :submit, "Filter", name: nil, class: "btn btn-warning" %>
        <% end %>
        <div class="filter-info">
          <% if params[:search].present? %>
            <p>Filtered by: </p>
            <p><%= "Difficulty - #{@difficulty}" if @difficulty.present? %> </p>
            <p><%= "Distance - #{@distance[0]} to #{@distance[1]} km" if @distance.present? %> </p>
            <p><%= "Ascent - #{@ascent[0]} to #{@ascent[1]} m" if @ascent.present? %></p>
            <p><%= "Duration - #{@duration[0].to_i/10} to #{@duration[1].to_i/10} days" if @duration.present? %></p>
            <%= link_to routes_path do %>
              <i class="fas fa-times"></i>
            <% end %>
          <% end %>
        </div>

      </div>


<!--       <% if @query.nil? %>
        <h1 id="query-header" class="text-center"></h1>
      <% else %>
        <h1 id="query-header" class="text-center"><%="Oscaping to: #{@query}"%></h1>
<!--       <% end %> -->


    <div id="listings" class="listings">
      <% i = 0 %>
      <% @routes.each do |route| %>
        <%= link_to route_path(route) do %>
          <div id='listing-<%= i %>' class='listing' data-position='<%= i %>'>
            <div class="square-image" style="background-image: url('<%= route.hero_image %>')"></div>
            <div class="listing-info">
              <div class="route-name"><h3><%= route.name %></h3></div>
              <div class="card-bookmark">
                <%= link_to route_favourites_path(route), method: :post do %>
                  <i class="fa fa-bookmark"></i>
                <% end %>
              </div>
              <div class="listing-bottom-info">
                <div class="route-details">
                  <div class="route-attribute">
                    <%= image_tag "distance.svg" %>
                    <%= route.distance %> km
                  </div>
                  <div class="route-attribute">
                    <%= image_tag "ascent.svg" %>
                    <%= route.ascent %> m
                  </div>
                  <div class="route-attribute">
                    <%= image_tag "duration.svg" %>
                      <% if route.duration == nil %> hours
                      <% elsif route.duration > 24 %>
                        <%= route.duration/10 %> days
                      <% else %>
                        <%= route.duration %> hours
                      </p>
                      <% end %>
                  </div>
                </div>
                <div class="route-creator">
                  By <%= route.user.first_name %>
                </div>
              </div>
            </div>
            <div class="description-box">
              <div id="description-text-<%= i %>" class="description-text">
                <p><%= route.description.truncate(70, separator: /\s/) %></p>
                <a href="#" class="point-link" data-position="<%= i %>">See on map</a>
              </div>
              <% i += 1 %>
            </div>
          </div>
        <% end %>
      <% end %>
    </div>
  </div>
  <div id='map' class='map pad2'></div>
</div>

<script>
  // Set max bounds of map to the whole of UK
  var bounds = [
      [-11.023648, 48.675969], // Southwest coordinates
      [2.599399, 61.280440]  // Northeast coordinates
  ];

  // loading the map
  mapboxgl.accessToken = 'pk.eyJ1IjoiYXBodWdoZXMiLCJhIjoiY2l6ZHgzaDdqMDA1MzJxa3lqeWF1MG55NSJ9.AhGg6Tqppzg2eurwaNl75w';
  var map = new mapboxgl.Map({
    container: 'map',
    style: 'mapbox://styles/mapbox/outdoors-v10',
    center: [-4.07750412, 54.68907436],
    zoom: 5,
    maxBounds: bounds // Sets bounds as max
  });

  // map.on("moveend", (event) => {
  //   console.log(event);
  // });

  // Navigation controls
  map.addControl(new mapboxgl.NavigationControl());

  // initializing indexGeojson to use to add markers later
  var indexGeojson = {
    "type": 'FeatureCollection',
    "features": []
  };

  // helper function to create geoJson "feature"
  const createGeoJsonFeature = (longitude, latitude, title, description) => {
    return {
      "type": 'Feature',
      "geometry": {
        "type": 'Point',
        "coordinates": [longitude, latitude]
      },
      "properties": {
        "title": title,
        "description": description
      }
    }
  };

  // helper function to add feature to indexGeoJson
  const addToGeoJson = (geoJsonFeature) => {
    indexGeojson.features.push(geoJsonFeature)
  };

  // add the data to the indexGeojson
  let longitude = 1.0;
  let latitude = 1.0;
  let title = "";
  let description = "";

  <% @routes.each do |route| %>
    longitude = <%= route.start_longitude %>
    latitude = <%= route.start_latitude %>
    title = "<%= route.name %>"
    description = "<%= route.description.truncate(90, separator: /\s/) %>"
    addToGeoJson(createGeoJsonFeature(longitude, latitude, title, description));
  <% end %>

  map.on('load', function(e) {
    map.addSource('routes', {
      type: 'geojson',
      data: indexGeojson
    });
  });

  function flyToRoute(currentFeature) {
    map.flyTo({
      center: currentFeature.geometry.coordinates,
      zoom: 10
    });
  }

  function createPopUp(currentFeature) {
    var popUps = document.getElementsByClassName('mapboxgl-popup');
    // Check if there is already a popup on the map and if so, remove it
    if (popUps[0]) popUps[0].remove();

    var popup = new mapboxgl.Popup({ offset: 25 })
      .setLngLat(currentFeature.geometry.coordinates)
      .setHTML('<h3>' + currentFeature.properties.title + '</h3><p>' + currentFeature.properties.description + '</p>')
      .addTo(map);
  }

  // this is so it is possible to use .remove() function in older browsers
  if (!('remove' in Element.prototype)) {
    Element.prototype.remove = function() {
      if (this.parentNode) {
        this.parentNode.removeChild(this);
      }
    };
  }

  const pointLinks = document.querySelectorAll('.point-link');
  pointLinks.forEach((element) => {
    // Add an event listener for the links in the sidebar listing
    element.addEventListener('click', function(e) {
      // Update the currentFeature to the store associated with the clicked link
      var clickedListing = indexGeojson.features[this.dataset.position];
      // 1. Fly to the point associated with the clicked link
      flyToRoute(clickedListing);
      // 2. Close all other popups and display popup for clicked route
      createPopUp(clickedListing);
      // 3. Highlight listing in sidebar (and remove highlight for all other listings)
      var activeItem = document.getElementsByClassName('active');
      if (activeItem[0]) {
        activeItem[0].classList.remove('active');
      }
      this.parentNode.classList.add('active');
      // console.log(this.parentNode);
    });
  })

  // Add markers to map
  indexGeojson.features.forEach(function(marker) {
    // create a HTML element for each feature
    var el = document.createElement('i');
    el.className = 'fas fa-map-marker fa-2x green-marker';

    // make a marker for each poi feature and add to the map
    new mapboxgl.Marker(el)
    .setLngLat(marker.geometry.coordinates)
    .setPopup(new mapboxgl.Popup({ offset: 25 })
    .setHTML('<h5>' + marker.properties.title + '</h5><p>' + marker.properties.description + '</p>'))
    .addTo(map);

    el.addEventListener('click', (e) => {
      flyToRoute(marker);
      createPopUp(marker);
      e.stopPropagation();
      // if (activeItem[0]) {
      //   activeItem[0].classList.remove('active');
      // }
      // var listing = document.getElementById('listing-' + i);
      // console.log(listing);
      // listing.classList.add('active');
    })
  });

  // Shorten a string to less than maxLen characters without truncating words.
  function shorten(str, maxLen, separator = ' ') {
    if (str.length <= maxLen) return str;
    return str.substr(0, str.lastIndexOf(separator, maxLen));
  };


</script>
