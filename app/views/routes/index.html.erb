<div class="map-container">
  <div class='sidebar'>
    <div class="heading pad2">
      <h1>Search Routes</h1>
      <div id="search-field">
        <%= form_tag routes_path, method: :get do %>
          <%= text_field_tag :query,
            params[:query],
            class: "form-control",
            placeholder: "Find a hike by name or description, difficulty, duration, ascent, distance..."
          %>
        <% end %>
      </div>
      <% if @query.nil? %>
        <h1 id="query-header" class="text-center"></h1>
      <% else %>
        <h1 id="query-header" class="text-center"><%="Oscaping to: #{@query}"%></h1>
      <% end %>
    </div>
    <div id="listings" class="listings">
      <% i = 0 %>
      <% @routes.each do |route| %>
        <%= link_to route_path(route) do %>
          <div id='listing-<%= i %>' class='listing' data-position='<%= i %>'>
            <div class="square-image" style="background-image: url('<%= route.hero_image %>')"></div>
            <div class="listing-info">
              <div class="route-name"><h3><%= route.name %></h3></div>
              <div class="card-bookmark">
                <%= link_to route_favourites_path(route), method: :post do %>
                  <i class="fa fa-bookmark"></i>
                <% end %>
              </div>
              <div class="listing-bottom-info">
                <div class="route-details">
                  <div class="route-attribute">
                    <p><i class="fas fa-arrows-alt-h"></i>
                      <%= route.distance %>km</p>
                  </div>
                  <div class="route-attribute">
                    <p><i class="fas fa-long-arrow-alt-up"></i> <%= route.ascent %>m</p>
                  </div>
                  <div class="route-attribute">
                    <p><i class="far fa-clock"></i>
                      <% if route.duration == nil %> hours
                      <% elsif route.duration > 24 %>
                        <%= route.duration/12 %> days
                      <% else %>
                        <%= route.duration %> hours
                      </p>
                      <% end %>
                  </div>
                  <div class="route-creator"><p>By <%= route.user.first_name %></p></div>
                </div>
              </div>
            </div>
            <div class="description-box">
              <div id="description-text-<%= i %>" class="description-text">
                <p>Here is a little description of the route...</p>
                <a href="#" class="point-link" data-position="<%= i %>">See on map</a>
              </div>
              <% i += 1 %>
            </div>
          </div>
        <% end %>
      <% end %>
    </div>

  </div>
  <div id='map' class='map pad2'></div>
</div>

<script>
  // loading the map
  mapboxgl.accessToken = 'pk.eyJ1IjoiYXBodWdoZXMiLCJhIjoiY2l6ZHgzaDdqMDA1MzJxa3lqeWF1MG55NSJ9.AhGg6Tqppzg2eurwaNl75w';
  var map = new mapboxgl.Map({
    container: 'map',
    style: 'mapbox://styles/mapbox/outdoors-v10',
    center: [-0.1454544, 50.9241143],
    zoom: 10
  });

  // map.on("moveend", (event) => {
  //   console.log(event);
  // });

  // initializing indexGeojson to use to add markers later
  var indexGeojson = {
    "type": 'FeatureCollection',
    "features": []
  };

  // helper function to create geoJson "feature"
  const createGeoJsonFeature = (longitude, latitude, title, description) => {
    return {
      "type": 'Feature',
      "geometry": {
        "type": 'Point',
        "coordinates": [longitude, latitude]
      },
      "properties": {
        "title": title,
        "description": description
      }
    }
  };

  // helper function to add feature to indexGeoJson
  const addToGeoJson = (geoJsonFeature) => {
    indexGeojson.features.push(geoJsonFeature)
  };

  // add the data to the indexGeojson
  let longitude = 1.0;
  let latitude = 1.0;
  let title = "";
  let description = "";

  <% @routes.each do |route| %>
    longitude = <%= route.start_longitude %>
    latitude = <%= route.start_latitude %>
    title = "<%= route.name %>"
    description = "<%= route.description %>"
    addToGeoJson(createGeoJsonFeature(longitude, latitude, title, description));
  <% end %>

  map.on('load', function(e) {
  // Add the data to your map as a layer
    map.addLayer({
      id: 'locations',
      type: 'symbol',
      // Add a GeoJSON source containing place coordinates and information.
      source: {
        type: 'geojson',
        data: indexGeojson
      },
      layout: {
        'icon-image': 'restaurant-15',
        'icon-allow-overlap': true,
      }
    });
    // buildMapLinks(indexGeojson);
  });

  function buildMapLinks(data) {
  // Iterate through the list of stores
    for (i = 0; i < data.features.length; i++) {
      var currentFeature = data.features[i];
      // Shorten data.feature.properties to just `prop` so we're not
      // writing this long form over and over again.
      var prop = currentFeature.properties;

      var descriptionText = document.getElementById(`description-text-${i}`);
      var pointLink = descriptionText.appendChild(document.createElement('a'));
      // console.log(pointLink);
      pointLink.href = '#';
      pointLink.className = 'point-link';
      pointLink.dataPosition = i;
      pointLink.innerHTML = 'See on map';
    }
  }

  function flyToStore(currentFeature) {
    map.flyTo({
      center: currentFeature.geometry.coordinates,
      zoom: 15
    });
  }

  function createPopUp(currentFeature) {
    var popUps = document.getElementsByClassName('mapboxgl-popup');
    // Check if there is already a popup on the map and if so, remove it
    if (popUps[0]) popUps[0].remove();

    var popup = new mapboxgl.Popup({ closeOnClick: false, offset: 25 })
      .setLngLat(currentFeature.geometry.coordinates)
      .setHTML('<h3>' + currentFeature.properties.title + '</h3><p>' + currentFeature.properties.description + '</p>')
      .addTo(map);
  }

  // this is so it is possible to use .remove() function in older browsers
  if (!('remove' in Element.prototype)) {
    Element.prototype.remove = function() {
      if (this.parentNode) {
        this.parentNode.removeChild(this);
      }
    };
  }
  const pointLinks = document.querySelectorAll('.point-link');
  pointLinks.forEach((element) => {
    // Add an event listener for the links in the sidebar listing
    element.addEventListener('click', function(e) {
      // Update the currentFeature to the store associated with the clicked link
      var clickedListing = indexGeojson.features[this.dataset.position];
      // 1. Fly to the point associated with the clicked link
      flyToStore(clickedListing);
      // 2. Close all other popups and display popup for clicked store
      createPopUp(clickedListing);
      // 3. Highlight listing in sidebar (and remove highlight for all other listings)
      var activeItem = document.getElementsByClassName('active');
      if (activeItem[0]) {
        activeItem[0].classList.remove('active');
      }
      this.parentNode.classList.add('active');
      console.log(this.parentNode);
    });
  })

  // Add an event listener for when a user clicks on the map
  map.on('click', function(e) {
    // console.log(e);
    // Query all the rendered points in the view
    var features = map.queryRenderedFeatures(e.point, { layers: ['locations'] });
    if (features.length) {
      var clickedPoint = features[0];
      // 1. Fly to the point
      flyToStore(clickedPoint);
      // 2. Close all other popups and display popup for clicked store
      createPopUp(clickedPoint);
      // 3. Highlight listing in sidebar (and remove highlight for all other listings)
      var activeItem = document.getElementsByClassName('active');
      if (activeItem[0]) {
        activeItem[0].classList.remove('active');
      }
      // Find the index of the store.features that corresponds to the clickedPoint that fired the event listener
      var selectedFeature = clickedPoint.properties.title;

      for (var i = 0; i < indexGeojson.features.length; i++) {
        if (stores.features[i].properties.title === selectedFeature) {
          selectedFeatureIndex = i;
        }
      }
      // Select the correct list item using the found index and add the active class
      var listing = document.getElementById('listing-' + selectedFeatureIndex);
      listing.classList.add('active');
    }
  });

</script>
