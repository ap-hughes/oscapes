  <div id='map'></div>

  <script>

    var geojson = {
    "type": "FeatureCollection",
    "features": [{
        "type": "Feature",
        "geometry": {
            "type": "LineString",
            "properties": {},
            "coordinates": <%= @coordinates %>
            }
        }]
    };

    // // Calculate the total length
    // var length = turf.length(geojson);
    // document.getElementById("distance").innerHTML = Math.round(length) + ' km'

    // // Calculate the total ascent
    // // points will be a feature collection
    // var points = turf.explode(geojson);
    // var points_array = points["features"]
    // var select_points = points_array.filter(function(value, index, Arr) {
    //   return index % 20 == 0;
    // });
    // // Get the elevation of each point
    // let elevation = []
    // select_points.forEach (function(element, index) {
    //   lon_first = select_points[index]["geometry"]["coordinates"][0];
    //   lat_first = select_points[index]["geometry"]["coordinates"][1];
    //    var feature_collection_url = `https://api.mapbox.com/v4/mapbox.mapbox-terrain-v2/tilequery/${lon_first},${lat_first}.json?&access_token=pk.eyJ1IjoiYXBodWdoZXMiLCJhIjoiY2l6ZHgzaDdqMDA1MzJxa3lqeWF1MG55NSJ9.AhGg6Tqppzg2eurwaNl75w`;
    //   fetch(feature_collection_url)
    //     .then(response => response.json())
    //     .then((data) => {
    //       data.features.forEach(function(feature, index) {
    //         if (feature.properties.tilequery.layer === 'contour') {
    //           elevation.push(feature.properties.ele)
    //         }
    //       })
    //     });
    // });

    // let ascent = 0
    // setTimeout(function() {
    //   elevation.forEach(function(ele, index) {
    //     if (index < elevation.length - 1) {
    //       if (ele < elevation[index + 1]) {
    //         ascent += elevation[index + 1] - ele
    //       }
    //     }
    //   })

    // let body = {
    //   distance: length,
    //   ascent: ascent
    // }

    // let token = document.getElementsByTagName('meta')[3].content

    // fetch('/routes/<%= @route.id %>/set_ascent_and_distance', {
    //   method: 'PUT',
    //   headers: {
    //     'Content-Type': 'application/json',
    //     'Accept': 'application/json',
    //     'X-Requested-With': 'XMLHttpRequest',
    //     'X-CSRF-TOKEN': token
    //   },
    //   credentials: 'same-origin',
    //   body: JSON.stringify(body)
    // })
    // .then(response => response.json())
    // .then((data) => {
    //   console.log(data); // Look at local_names.default
    // });
    // }, 2000)

    // Loading the map
    mapboxgl.accessToken = 'pk.eyJ1IjoiYXBodWdoZXMiLCJhIjoiY2l6ZHgzaDdqMDA1MzJxa3lqeWF1MG55NSJ9.AhGg6Tqppzg2eurwaNl75w';
    var map = new mapboxgl.Map({
      container: 'map',
      style: 'mapbox://styles/mapbox/outdoors-v10',
      center: <%= @center %>,
      zoom: 10
    });

    // Navigation controls
    map.addControl(new mapboxgl.NavigationControl());

    // Loading the route on the map
    map.on('load', function () {

      map.addLayer({
        "id": "route",
        "type": "line",
        "source": {
            "type": "geojson",
            "data": geojson
        },
        "layout": {
            "line-join": "round",
            "line-cap": "round"
        },
        "paint": {
            "line-color": "#1a936f",
            "line-width": 8
        }
      });

      // Geographic coordinates of the LineString
      var coordinates = geojson.features[0].geometry.coordinates;

      // Pass the first coordinates in the LineString to `lngLatBounds` &
      // wrap each coordinate pair in `extend` to include them in the bounds
      // result. A variation of this technique could be applied to zooming
      // to the bounds of multiple Points or Polygon geomteries - it just
      // requires wrapping all the coordinates with the extend method.
      var bounds = coordinates.reduce(function(bounds, coord) {
          return bounds.extend(coord);
      }, new mapboxgl.LngLatBounds(coordinates[0], coordinates[0]));

      map.fitBounds(bounds, {
          padding: 40
      });
    });
  </script>
