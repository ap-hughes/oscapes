  <div id='map'></div>

  <script>

    var geojson = {
    "type": "FeatureCollection",
    "features": [{
        "type": "Feature",
        "geometry": {
            "type": "MultiLineString",
            "properties": {},
            "coordinates": <%= @coordinates %>
            }
        }]
    };

    var poiGeojson = {
      "type": 'FeatureCollection',
      "features": [{
        "type": 'Feature',
        "geometry": {
          "type": 'Point',
          "coordinates": [-2.359608, 51.381171]
        },
        "properties": {
          "title": 'The Roman Baths',
          "description": 'Roman bathhouse and temple, with spring water, restaurant and museum tour'
        }
      }]
    };

    // Calculate the total length
    var length = turf.length(geojson, {units: 'miles'});
    document.getElementById("distance").innerHTML = Math.round(length) + ' miles'

    // Calculate the total ascent
    // points will be a feature collection
    var points = turf.explode(geojson);
    section = points["features"].slice(1800,2000);
    // Get the elevation of each point
    // var elevation = []
    // section.forEach (function(element, index) {
    //   lon_first = section[index]["geometry"]["coordinates"][0];
    //   lat_first = section[index]["geometry"]["coordinates"][1];
    //    var feature_collection_url = `https://api.mapbox.com/v4/mapbox.mapbox-terrain-v2/tilequery/${lon_first},${lat_first}.json?&access_token=pk.eyJ1IjoiYXBodWdoZXMiLCJhIjoiY2l6ZHgzaDdqMDA1MzJxa3lqeWF1MG55NSJ9.AhGg6Tqppzg2eurwaNl75w`;
    //   fetch(feature_collection_url)
    //     .then(response => response.json())
    //     .then((data) => {
    //       var feature_collection = data;
    //       var features = feature_collection['features']
    //       var last = features.pop();
    //       console.log(last);
    //       var ele = last['properties']['ele'];
    //       elevation.push(ele);
    //     });
    // });
    // console.log(elevation);

    // Loading the map
    mapboxgl.accessToken = 'pk.eyJ1IjoiYXBodWdoZXMiLCJhIjoiY2l6ZHgzaDdqMDA1MzJxa3lqeWF1MG55NSJ9.AhGg6Tqppzg2eurwaNl75w';
    var map = new mapboxgl.Map({
      container: 'map',
      style: 'mapbox://styles/mapbox/outdoors-v10',
      center: <%= @center %>,
      zoom: 10
    });

    // Navigation controls
    map.addControl(new mapboxgl.NavigationControl());

    // Loading the route on the map
    map.on('load', function () {

      map.addLayer({
        "id": "route",
        "type": "line",
        "source": {
            "type": "geojson",
            "data": geojson
        },
        "layout": {
            "line-join": "round",
            "line-cap": "round"
        },
        "paint": {
            "line-color": "#1a936f",
            "line-width": 8
        }
      });

      // Geographic coordinates of the LineString
      var coordinates = geojson.features[0].geometry.coordinates;

      // Add markers to map

      poiGeojson.features.forEach(function(marker) {
        // create a HTML element for each feature
        var el = document.createElement('i');
        el.className = 'fas fa-map-marker fa-2x';

        // make a marker for each poi feature and add to the map
        new mapboxgl.Marker(el)
        .setLngLat(marker.geometry.coordinates)
        .setPopup(new mapboxgl.Popup({ offset: 25 })
        .setHTML('<h3>' + marker.properties.title + '</h3><p>' + marker.properties.description + '</p>'))
        .addTo(map);
      });

      // Pass the first coordinates in the LineString to `lngLatBounds` &
      // wrap each coordinate pair in `extend` to include them in the bounds
      // result. A variation of this technique could be applied to zooming
      // to the bounds of multiple Points or Polygon geomteries - it just
      // requires wrapping all the coordinates with the extend method.
      var bounds = coordinates.reduce(function(bounds, coord) {
          return bounds.extend(coord);
      }, new mapboxgl.LngLatBounds(coordinates[0][0], coordinates[0][0]));

      map.fitBounds(bounds, {
          padding: 40
      });
    });
  </script>
